/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface IshgarVaultInterface extends utils.Interface {
  contractName: 'IshgarVault';
  functions: {
    'DEPOSIT_ETHER_SELECTOR()': FunctionFragment;
    'DEPOSIT_NFT_SELECTOR()': FunctionFragment;
    '_exists(address,uint256)': FunctionFragment;
    'balances(address)': FunctionFragment;
    'depositEther()': FunctionFragment;
    'depositNFT(address,uint256)': FunctionFragment;
    'deposits(address,uint256)': FunctionFragment;
    'ishgarL2Address()': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'starknetCoreAddress()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateIshgarL2Address(uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'DEPOSIT_ETHER_SELECTOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEPOSIT_NFT_SELECTOR', values?: undefined): string;
  encodeFunctionData(functionFragment: '_exists', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balances', values: [string]): string;
  encodeFunctionData(functionFragment: 'depositEther', values?: undefined): string;
  encodeFunctionData(functionFragment: 'depositNFT', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'deposits', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'ishgarL2Address', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'starknetCoreAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateIshgarL2Address', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'DEPOSIT_ETHER_SELECTOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEPOSIT_NFT_SELECTOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_exists', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositEther', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositNFT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ishgarL2Address', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'starknetCoreAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateIshgarL2Address', data: BytesLike): Result;

  events: {
    'DepositEther(address,uint256)': EventFragment;
    'DepositNFT(address,address,uint256,string)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'UpdateIshgarL2Address(uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'DepositEther'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositNFT'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateIshgarL2Address'): EventFragment;
}

export type DepositEtherEvent = TypedEvent<[string, BigNumber], { depositor: string; amount: BigNumber }>;

export type DepositEtherEventFilter = TypedEventFilter<DepositEtherEvent>;

export type DepositNFTEvent = TypedEvent<
  [string, string, BigNumber, string],
  { depositor: string; erc721: string; tokenId: BigNumber; tokenURI: string }
>;

export type DepositNFTEventFilter = TypedEventFilter<DepositNFTEvent>;

export type OwnershipTransferredEvent = TypedEvent<[string, string], { previousOwner: string; newOwner: string }>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export type UpdateIshgarL2AddressEvent = TypedEvent<
  [BigNumber, BigNumber],
  { previousAddress: BigNumber; newAddress: BigNumber }
>;

export type UpdateIshgarL2AddressEventFilter = TypedEventFilter<UpdateIshgarL2AddressEvent>;

export interface IshgarVault extends BaseContract {
  contractName: 'IshgarVault';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IshgarVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEPOSIT_ETHER_SELECTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEPOSIT_NFT_SELECTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    _exists(erc721Address: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    depositEther(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    depositNFT(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposits(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        depositor: string;
        erc721: string;
        tokenId: BigNumber;
      }
    >;

    ishgarL2Address(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    starknetCoreAddress(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateIshgarL2Address(
      newAddress: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEPOSIT_ETHER_SELECTOR(overrides?: CallOverrides): Promise<BigNumber>;

  DEPOSIT_NFT_SELECTOR(overrides?: CallOverrides): Promise<BigNumber>;

  _exists(erc721Address: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  depositEther(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  depositNFT(
    erc721Address: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposits(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      depositor: string;
      erc721: string;
      tokenId: BigNumber;
    }
  >;

  ishgarL2Address(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  starknetCoreAddress(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateIshgarL2Address(
    newAddress: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEPOSIT_ETHER_SELECTOR(overrides?: CallOverrides): Promise<BigNumber>;

    DEPOSIT_NFT_SELECTOR(overrides?: CallOverrides): Promise<BigNumber>;

    _exists(erc721Address: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositEther(overrides?: CallOverrides): Promise<void>;

    depositNFT(erc721Address: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    deposits(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        depositor: string;
        erc721: string;
        tokenId: BigNumber;
      }
    >;

    ishgarL2Address(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    starknetCoreAddress(overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    updateIshgarL2Address(newAddress: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'DepositEther(address,uint256)'(depositor?: string | null, amount?: BigNumberish | null): DepositEtherEventFilter;
    DepositEther(depositor?: string | null, amount?: BigNumberish | null): DepositEtherEventFilter;

    'DepositNFT(address,address,uint256,string)'(
      depositor?: string | null,
      erc721?: string | null,
      tokenId?: BigNumberish | null,
      tokenURI?: null
    ): DepositNFTEventFilter;
    DepositNFT(
      depositor?: string | null,
      erc721?: string | null,
      tokenId?: BigNumberish | null,
      tokenURI?: null
    ): DepositNFTEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'UpdateIshgarL2Address(uint256,uint256)'(
      previousAddress?: BigNumberish | null,
      newAddress?: BigNumberish | null
    ): UpdateIshgarL2AddressEventFilter;
    UpdateIshgarL2Address(
      previousAddress?: BigNumberish | null,
      newAddress?: BigNumberish | null
    ): UpdateIshgarL2AddressEventFilter;
  };

  estimateGas: {
    DEPOSIT_ETHER_SELECTOR(overrides?: CallOverrides): Promise<BigNumber>;

    DEPOSIT_NFT_SELECTOR(overrides?: CallOverrides): Promise<BigNumber>;

    _exists(erc721Address: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositEther(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    depositNFT(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposits(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ishgarL2Address(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    starknetCoreAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateIshgarL2Address(
      newAddress: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEPOSIT_ETHER_SELECTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEPOSIT_NFT_SELECTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _exists(erc721Address: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balances(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositEther(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    depositNFT(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposits(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ishgarL2Address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    starknetCoreAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateIshgarL2Address(
      newAddress: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
